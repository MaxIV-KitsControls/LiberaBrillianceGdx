/*----- PROTECTED REGION ID(LiberaBrillianceGdxClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaBrillianceGdxClass.h
//
// description : Include for the LiberaBrillianceGdx root class.
//               This class is the singleton class for
//                the LiberaBrillianceGdx device class.
//               It contains all properties and methods which the 
//               LiberaBrillianceGdx requires only once e.g. the commands.
//
// project :     Libera BPM Event Receiver Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LiberaBrillianceGdxClass_H
#define LiberaBrillianceGdxClass_H

#include <tango.h>
#include <LiberaBrillianceGdx.h>


/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdxClass.h


namespace LiberaBrillianceGdx_ns
{
/*----- PROTECTED REGION ID(LiberaBrillianceGdxClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdxClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute FOFBInterlockStatus class definition
class FOFBInterlockStatusAttrib: public Tango::Attr
{
public:
	FOFBInterlockStatusAttrib():Attr("FOFBInterlockStatus",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~FOFBInterlockStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBInterlockStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBInterlockStatus_allowed(ty);}
};

//	Attribute GbeOrbitEnable class definition
class GbeOrbitEnableAttrib: public Tango::Attr
{
public:
	GbeOrbitEnableAttrib():Attr("GbeOrbitEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~GbeOrbitEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_GbeOrbitEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->write_GbeOrbitEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_GbeOrbitEnable_allowed(ty);}
};

//	Attribute FOFBStateMode class definition
class FOFBStateModeAttrib: public Tango::Attr
{
public:
	FOFBStateModeAttrib():Attr("FOFBStateMode",
			Tango::DEV_SHORT, Tango::READ) {};
	~FOFBStateModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBStateMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBStateMode_allowed(ty);}
};

//	Attribute FOFBSwitch class definition
class FOFBSwitchAttrib: public Tango::Attr
{
public:
	FOFBSwitchAttrib():Attr("FOFBSwitch",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~FOFBSwitchAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBSwitch(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->write_FOFBSwitch(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBSwitch_allowed(ty);}
};

//	Attribute FOFBAxis class definition
class FOFBAxisAttrib: public Tango::Attr
{
public:
	FOFBAxisAttrib():Attr("FOFBAxis",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~FOFBAxisAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBAxis(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->write_FOFBAxis(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBAxis_allowed(ty);}
};

//	Attribute FOFBDimBpms class definition
class FOFBDimBpmsAttrib: public Tango::Attr
{
public:
	FOFBDimBpmsAttrib():Attr("FOFBDimBpms",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~FOFBDimBpmsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBDimBpms(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->write_FOFBDimBpms(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBDimBpms_allowed(ty);}
};

//	Attribute FOFBDimEigenmodes class definition
class FOFBDimEigenmodesAttrib: public Tango::Attr
{
public:
	FOFBDimEigenmodesAttrib():Attr("FOFBDimEigenmodes",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~FOFBDimEigenmodesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_FOFBDimEigenmodes(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->write_FOFBDimEigenmodes(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_FOFBDimEigenmodes_allowed(ty);}
};

//	Attribute GbeOrbitStatus class definition
class GbeOrbitStatusAttrib: public Tango::Attr
{
public:
	GbeOrbitStatusAttrib():Attr("GbeOrbitStatus",
			Tango::DEV_LONG, Tango::READ) {};
	~GbeOrbitStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<LiberaBrillianceGdx *>(dev))->read_GbeOrbitStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<LiberaBrillianceGdx *>(dev))->is_GbeOrbitStatus_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command GetParameters class definition
class GetParametersClass : public Tango::Command
{
public:
	GetParametersClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetParametersClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetParametersClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_GetParameters_allowed(any);}
};

//	Command ReloadSystemProperties class definition
class ReloadSystemPropertiesClass : public Tango::Command
{
public:
	ReloadSystemPropertiesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReloadSystemPropertiesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReloadSystemPropertiesClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_ReloadSystemProperties_allowed(any);}
};

//	Command MagicCommand class definition
class MagicCommandClass : public Tango::Command
{
public:
	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MagicCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MagicCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_MagicCommand_allowed(any);}
};

//	Command ForceInitSettings class definition
class ForceInitSettingsClass : public Tango::Command
{
public:
	ForceInitSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ForceInitSettingsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ForceInitSettingsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_ForceInitSettings_allowed(any);}
};

//	Command SetTraceLevel class definition
class SetTraceLevelClass : public Tango::Command
{
public:
	SetTraceLevelClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetTraceLevelClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetTraceLevelClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_SetTraceLevel_allowed(any);}
};

//	Command ResetStatusInterlock class definition
class ResetStatusInterlockClass : public Tango::Command
{
public:
	ResetStatusInterlockClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetStatusInterlockClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetStatusInterlockClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<LiberaBrillianceGdx *>(dev))->is_ResetStatusInterlock_allowed(any);}
};


/**
 *	The LiberaBrillianceGdxClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  LiberaBrillianceGdxClass : public Tango::DeviceClass
#else
class LiberaBrillianceGdxClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdxClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdxClass::Additionnal DServer data members

	//	Class properties data members
	public:
		//	Institute:	0: TANGO_INSTITUTE (GENERIC)
		//  1: ALBA
		//  2: ESRF
		//  3: ELETTRA
		//  4: SOLEIL
		Tango::DevShort	institute;
	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static LiberaBrillianceGdxClass *init(const char *);
		static LiberaBrillianceGdxClass *instance();
		~LiberaBrillianceGdxClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		LiberaBrillianceGdxClass(string &);
		static LiberaBrillianceGdxClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	LiberaBrillianceGdx_H
