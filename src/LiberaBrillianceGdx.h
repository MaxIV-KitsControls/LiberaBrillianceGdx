/*----- PROTECTED REGION ID(LiberaBrillianceGdx.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaBrillianceGdx.h
//
// description : Include file for the LiberaBrillianceGdx class
//
// project :     Libera BPM Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LiberaBrillianceGdx_H
#define LiberaBrillianceGdx_H

#include <tango.h>

class LiberaClient;
class LiberaSignal;

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx.h

/**
 *  LiberaBrillianceGdx class description:
 *    Libera GDX Device Server
 *    The interface should be the same as for the Brillance model.
 */

namespace LiberaBrillianceGdx_ns
{
/*----- PROTECTED REGION ID(LiberaBrillianceGdx::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::Additional Class Declarations

class LiberaBrillianceGdx : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LiberaBrillianceGdx::Data Members) ENABLED START -----*/

	//		Add your own data members
    LiberaClient *m_libera;
    bool initFlag;
    void init_settings();
    void LogStatusGuard(std::string status);               // Give the status to Tango.

    std::string module;
    Tango::DevState m_state;
    std::string m_status;
    std::string current_status;

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::Data Members

//	Device property data members
public:
	//	LiberaIpAddr:	The Libera IP address [no default value]
	string	liberaIpAddr;
	//	ErrorTrace:	Trace Error functionality for the Libera, by default is Disabled:
	//   * Value: OutPut ,  TraceLevel
	//  	* Output[0] :  OutPut on Screen = 0
	//  	                         OutPut on File = 0 (﻿/var/tmp/ds.log/LiberaMciTrace.log)
	//  	* TraceLevel[1] : ﻿   Off     = 0,
	//          		      Low     = 1,
	//  		      Med     = 2,
	//  		      High    = 3,
	//  		      Detail  = 4
	vector<Tango::DevShort>	errorTrace;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_FOFBInterlockStatus_read;
	Tango::DevBoolean	*attr_GbeOrbitEnable_read;
	Tango::DevShort	*attr_FOFBStateMode_read;
	Tango::DevShort	*attr_FOFBSwitch_read;
	Tango::DevShort	*attr_FOFBAxis_read;
	Tango::DevLong	*attr_FOFBDimBpms_read;
	Tango::DevLong	*attr_FOFBDimEigenmodes_read;
	Tango::DevLong	*attr_GbeOrbitStatus_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrillianceGdx(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrillianceGdx(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LiberaBrillianceGdx(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LiberaBrillianceGdx() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrillianceGdx::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrillianceGdx::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute FOFBInterlockStatus related methods
 *	Description: FOFB Interlock Status
 *               node:boards.gdx1.fofb.interlock.status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_FOFBInterlockStatus(Tango::Attribute &attr);
	virtual bool is_FOFBInterlockStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute GbeOrbitEnable related methods
 *	Description: Gbe Orbit Enabled
 *               node:boards.gdx1.gbe_orbit.enable
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_GbeOrbitEnable(Tango::Attribute &attr);
	virtual void write_GbeOrbitEnable(Tango::WAttribute &attr);
	virtual bool is_GbeOrbitEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute FOFBStateMode related methods
 *	Description: FOFB State Mode
 *               node:boards.gdx1.fofb.state.mode
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_FOFBStateMode(Tango::Attribute &attr);
	virtual bool is_FOFBStateMode_allowed(Tango::AttReqType type);
/**
 *	Attribute FOFBSwitch related methods
 *	Description: FOFB Switch
 *               node:boards.gdx1.fofb.switch
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_FOFBSwitch(Tango::Attribute &attr);
	virtual void write_FOFBSwitch(Tango::WAttribute &attr);
	virtual bool is_FOFBSwitch_allowed(Tango::AttReqType type);
/**
 *	Attribute FOFBAxis related methods
 *	Description: FOFB Axis
 *               node:boards.gdx1.fofb.axis
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_FOFBAxis(Tango::Attribute &attr);
	virtual void write_FOFBAxis(Tango::WAttribute &attr);
	virtual bool is_FOFBAxis_allowed(Tango::AttReqType type);
/**
 *	Attribute FOFBDimBpms related methods
 *	Description: FOFB Dim BPMS
 *               node:boards.gdx1.dim.bpms
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FOFBDimBpms(Tango::Attribute &attr);
	virtual void write_FOFBDimBpms(Tango::WAttribute &attr);
	virtual bool is_FOFBDimBpms_allowed(Tango::AttReqType type);
/**
 *	Attribute FOFBDimEigenmodes related methods
 *	Description: FOFB Dim Eigenmodes
 *               node:boards.gdx1.fofb.dim.eigenmodes
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FOFBDimEigenmodes(Tango::Attribute &attr);
	virtual void write_FOFBDimEigenmodes(Tango::WAttribute &attr);
	virtual bool is_FOFBDimEigenmodes_allowed(Tango::AttReqType type);
/**
 *	Attribute GbeOrbitStatus related methods
 *	Description: Gbe Orbit Status
 *               node:boards.gdx1.gbe_orbit.status
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_GbeOrbitStatus(Tango::Attribute &attr);
	virtual bool is_GbeOrbitStatus_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LiberaBrillianceGdx::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command GetParameters related method
	 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
	 *
	 *	@returns The BPM gain and offsets
	 */
	virtual Tango::DevVarDoubleStringArray *get_parameters();
	virtual bool is_GetParameters_allowed(const CORBA::Any &any);
	/**
	 *	Command ReloadSystemProperties related method
	 *	Description: 
	 *
	 */
	virtual void reload_system_properties();
	virtual bool is_ReloadSystemProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command MagicCommand related method
	 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
	 *
	 *	@param argin absolute path of the node name
	 *	@returns value of specified node(s)
	 */
	virtual Tango::DevVarStringArray *magic_command(Tango::DevString argin);
	virtual bool is_MagicCommand_allowed(const CORBA::Any &any);
	/**
	 *	Command ForceInitSettings related method
	 *	Description: Initializing Libera Default Settings (Based to the properties) without performing init_device
	 *
	 */
	virtual void force_init_settings();
	virtual bool is_ForceInitSettings_allowed(const CORBA::Any &any);
	/**
	 *	Command SetTraceLevel related method
	 *	Description: Sets the Trace Error Level:  	Off     = 0,
	 *                       		Low     = 1,
	 *               		Med     = 2,
	 *               		High    = 3,
	 *               		Detail  = 4
	 *
	 *	@param argin 
	 */
	virtual void set_trace_level(Tango::DevUShort argin);
	virtual bool is_SetTraceLevel_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetStatusInterlock related method
	 *	Description: Command to reset FOFB interlock Status
	 *
	 */
	virtual void reset_status_interlock();
	virtual bool is_ResetStatusInterlock_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LiberaBrillianceGdx::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LiberaBrillianceGdx::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
    void set_lib_error(std::string nodeinfo);
    std::string set_interlock_status();

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LiberaBrillianceGdx::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::Additional Classes Definitions

}	//	End of namespace

#endif   //	LiberaBrillianceGdx_H
