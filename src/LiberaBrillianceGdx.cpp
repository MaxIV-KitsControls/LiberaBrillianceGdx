/*----- PROTECTED REGION ID(LiberaBrillianceGdx.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaBrillianceGdx.cpp
//
// description : C++ source for the LiberaBrillianceGdx class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaBrillianceGdx are implemented in this file.
//
// project :     Libera BPM Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaBrillianceGdx.h>
#include <LiberaBrillianceGdxClass.h>

#include "LiberaClient.h"
/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx.cpp

/**
 *  LiberaBrillianceGdx class description:
 *    Libera GDX Device Server
 *    The interface should be the same as for the Brillance model.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name            |  Method name
//================================================================
//  State                   |  dev_state
//  Status                  |  dev_status
//  GetParameters           |  get_parameters
//  ReloadSystemProperties  |  reload_system_properties
//  MagicCommand            |  magic_command
//  ForceInitSettings       |  force_init_settings
//  SetTraceLevel           |  set_trace_level
//  ResetStatusInterlock    |  reset_status_interlock
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  FOFBInterlockStatus  |  Tango::DevBoolean	Scalar
//  GbeOrbitEnable       |  Tango::DevBoolean	Scalar
//  FOFBStateMode        |  Tango::DevShort	Scalar
//  FOFBSwitch           |  Tango::DevShort	Scalar
//  FOFBAxis             |  Tango::DevShort	Scalar
//  FOFBDimBpms          |  Tango::DevLong	Scalar
//  FOFBDimEigenmodes    |  Tango::DevLong	Scalar
//  GbeOrbitStatus       |  Tango::DevLong	Scalar
//================================================================

namespace LiberaBrillianceGdx_ns
{
/*----- PROTECTED REGION ID(LiberaBrillianceGdx::namespace_starting) ENABLED START -----*/

	//	static initializations
//Tango::DevUShort c_liberaModel(1); // BPM type
//const std::string c_timingBoard("evrx2");

/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::LiberaBrillianceGdx()
 *	Description : Constructors for a Tango device
 *                implementing the classLiberaBrillianceGdx
 */
//--------------------------------------------------------
LiberaBrillianceGdx::LiberaBrillianceGdx(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::constructor_1
}
//--------------------------------------------------------
LiberaBrillianceGdx::LiberaBrillianceGdx(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::constructor_2
}
//--------------------------------------------------------
LiberaBrillianceGdx::LiberaBrillianceGdx(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::delete_device()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::delete_device) ENABLED START -----*/

	if (m_libera) {
        m_libera->Disconnect();
        delete m_libera;
        m_libera = NULL;
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::init_device()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
    m_libera = NULL;
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::init_device) ENABLED START -----*/

	//Set Trace Level Options //TODO refactor.

	//Stop before Set the new values.
	istd::TraceStop();
	//Set Level
	if (errorTrace.empty()) {
    	istd::TraceInit();
    	//Set Trace to Off
    	istd::TraceSetLevel(istd::eTrcOff);
    }
    else {
    	if(errorTrace[0] == 1) {
        	istd::TraceInit();
        	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(errorTrace[1]));
    	}
    	else {
    		istd::TraceInit("LiberaMciTrace.log", "/var/tmp/ds.log");
        	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(errorTrace[1]));
    	}
    }

    if (liberaIpAddr.empty())
    {
      INFO_STREAM << "Using 127.0.0.1 as ip address" << std::endl;
    }

    //set gdx1 board
	module = "boards.gdx1.";

	//	Initialize device
    m_libera = new LiberaClient(this, liberaIpAddr);

    try
    {
    //TODO DDTriggerCoiunter
    //m_libera->AddScalar(tim + "events.t2.count",
    //    attr_DDTriggerCounter_read, LiberaAttr::ULL2LONG);
    //m_libera->AddScalar(tim + "pll.compensate_offset", attr_CompensateTune_read);
    //m_libera->AddScalar("application.synchronize_lmt",
    //		attr_SynchronizeLMT_read, LiberaAttr::ULONGLONG2LONG, LiberaAttr::LONG2ULONGLONG);


    m_libera->AddScalar(module + "fofb.interlock.status", attr_FOFBInterlockStatus_read);
    m_libera->AddScalar(module + "fofb.state.mode", attr_FOFBStateMode_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(module + "fofb.switch", attr_FOFBSwitch_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(module + "fofb.axis", attr_FOFBAxis_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(module + "fofb.dim.bpms", attr_FOFBDimBpms_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(module + "fofb.dim.eigenmodes", attr_FOFBDimEigenmodes_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(module + "gbe_orbit.enable", attr_GbeOrbitEnable_read);
    m_libera->AddScalar(module + "gbe_orbit.status", attr_GbeOrbitStatus_read, LiberaAttr::ULONG2LONG);

//	m_libera->AddScalar("", attr_FOFBInterlockStatus_read);
//	m_libera->AddScalar("", attr_FOFBStateMode_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
//	m_libera->AddScalar("", attr_FOFBSwitch_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
//	m_libera->AddScalar("", attr_FOFBAxis_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
//	m_libera->AddScalar("", attr_FOFBDimBpms_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
//	m_libera->AddScalar("", attr_FOFBDimEigenmodes_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
//	m_libera->AddScalar("", attr_GbeOrbitEnable_read);
//	m_libera->AddScalar("", attr_GbeOrbitStatus_read, LiberaAttr::ULONG2LONG);


    //m_libera->AddSpectrum(module + "fofb.dim.magnets", attr_FOFBDimMagnets_read);
    //m_libera->AddSpectrum(module + "fofb.dim.magnets", attr_FOFBDimMagnets_read, LiberaAttr::ULARR2LARR);
    //m_libera->AddScalar(module + "gbe_orbit.enable", attr_GbeOrbitEnable_read);
    //m_libera->AddScalar(module + "gbe_orbit.status", attr_GbeOrbitStatus_read, LiberaAttr::ULONG2LONG);


    }
    catch (...)
    {
    	m_state = Tango::FAULT;
    	//m_state = Tango::UNKNOWN;
    	return;
    }

    try
    {

      m_libera->Connect();
      m_state = Tango::ON;
      m_status = "Connected";


      //Initiliaze Libera Setting-Attributes
      init_settings();

    }
    catch (...)
    {
      m_state = Tango::UNKNOWN;
      m_status = "Connection to module failed. Try to reinit the device.";
    }


	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
    DEBUG_STREAM << "LiberaBrillianceGdx::get_device_property() get device properties " << device_name << endl;

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("ErrorTrace"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LiberaBrillianceGdxClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaBrillianceGdxClass	*ds_class =
			(static_cast<LiberaBrillianceGdxClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize ErrorTrace from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  errorTrace;
		else {
			//	Try to initialize ErrorTrace from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  errorTrace;
		}
		//	And try to extract ErrorTrace value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  errorTrace;

	}

	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::always_executed_hook()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::always_executed_hook) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute FOFBInterlockStatus related method
 *	Description: FOFB Interlock Status
 *               node:boards.gdx1.fofb.interlock.status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBInterlockStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBInterlockStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBInterlockStatus) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBInterlockStatus_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBInterlockStatus
}
//--------------------------------------------------------
/**
 *	Read attribute GbeOrbitEnable related method
 *	Description: Gbe Orbit Enabled
 *               node:boards.gdx1.gbe_orbit.enable
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_GbeOrbitEnable(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_GbeOrbitEnable(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_GbeOrbitEnable) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_GbeOrbitEnable_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_GbeOrbitEnable
}
//--------------------------------------------------------
/**
 *	Write attribute GbeOrbitEnable related method
 *	Description: Gbe Orbit Enabled
 *               node:boards.gdx1.gbe_orbit.enable
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_GbeOrbitEnable(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_GbeOrbitEnable(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_GbeOrbitEnable) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_GbeOrbitEnable_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_GbeOrbitEnable
}
//--------------------------------------------------------
/**
 *	Read attribute FOFBStateMode related method
 *	Description: FOFB State Mode
 *               node:boards.gdx1.fofb.state.mode
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBStateMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBStateMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBStateMode) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBStateMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBStateMode
}
//--------------------------------------------------------
/**
 *	Read attribute FOFBSwitch related method
 *	Description: FOFB Switch
 *               node:boards.gdx1.fofb.switch
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBSwitch(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBSwitch(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBSwitch) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBSwitch_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBSwitch
}
//--------------------------------------------------------
/**
 *	Write attribute FOFBSwitch related method
 *	Description: FOFB Switch
 *               node:boards.gdx1.fofb.switch
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_FOFBSwitch(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBSwitch(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_FOFBSwitch) ENABLED START -----*/
	m_libera->UpdateScalar(attr_FOFBSwitch_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_FOFBSwitch
}
//--------------------------------------------------------
/**
 *	Read attribute FOFBAxis related method
 *	Description: FOFB Axis
 *               node:boards.gdx1.fofb.axis
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBAxis(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBAxis(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBAxis) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBAxis_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBAxis
}
//--------------------------------------------------------
/**
 *	Write attribute FOFBAxis related method
 *	Description: FOFB Axis
 *               node:boards.gdx1.fofb.axis
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_FOFBAxis(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBAxis(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_FOFBAxis) ENABLED START -----*/
	m_libera->UpdateScalar(attr_FOFBAxis_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_FOFBAxis
}
//--------------------------------------------------------
/**
 *	Read attribute FOFBDimBpms related method
 *	Description: FOFB Dim BPMS
 *               node:boards.gdx1.dim.bpms
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBDimBpms(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBDimBpms(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBDimBpms) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBDimBpms_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBDimBpms
}
//--------------------------------------------------------
/**
 *	Write attribute FOFBDimBpms related method
 *	Description: FOFB Dim BPMS
 *               node:boards.gdx1.dim.bpms
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_FOFBDimBpms(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBDimBpms(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_FOFBDimBpms) ENABLED START -----*/
	m_libera->UpdateScalar(attr_FOFBDimBpms_read, w_val);

	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_FOFBDimBpms
}
//--------------------------------------------------------
/**
 *	Read attribute FOFBDimEigenmodes related method
 *	Description: FOFB Dim Eigenmodes
 *               node:boards.gdx1.fofb.dim.eigenmodes
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_FOFBDimEigenmodes(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBDimEigenmodes(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_FOFBDimEigenmodes) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_FOFBDimEigenmodes_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_FOFBDimEigenmodes
}
//--------------------------------------------------------
/**
 *	Write attribute FOFBDimEigenmodes related method
 *	Description: FOFB Dim Eigenmodes
 *               node:boards.gdx1.fofb.dim.eigenmodes
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::write_FOFBDimEigenmodes(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBDimEigenmodes(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::write_FOFBDimEigenmodes) ENABLED START -----*/
	m_libera->UpdateScalar(attr_FOFBDimEigenmodes_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::write_FOFBDimEigenmodes
}
//--------------------------------------------------------
/**
 *	Read attribute GbeOrbitStatus related method
 *	Description: Gbe Orbit Status
 *               node:boards.gdx1.gbe_orbit.status
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::read_GbeOrbitStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::read_GbeOrbitStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::read_GbeOrbitStatus) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_GbeOrbitStatus_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::read_GbeOrbitStatus
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LiberaBrillianceGdx::dev_state()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::dev_state) ENABLED START -----*/
	Tango::DevState argout = m_state;
	//TODO cleanup
	//Save the current status before change.
	current_status=m_status;

	//if (argout == Tango::FAULT) {
	if (m_libera->m_errorFlag) {
		//m_status is set from Set lib error method.
		argout = Tango::FAULT;
		m_status = m_libera->m_errorStatus;
		LogStatusGuard(m_status);
	}
	else if (false)
	{
		//Add cases where we set to alarm.
		argout = Tango::ALARM;
	}
	else {
		argout = Tango::ON;
		m_status = "Connected";
	}


	//Set to Tango in order to use it for the LogStatusGuard (Doing it also below because Pogo generaters it)
	m_state = argout;
	set_state(argout);    // Give the state to Tango.

	//Call to set any new status message
	dev_status();

	//Care to not send any repetitive Log messages to the ES Cluster (its because we use polling to dev_state() method.)
	LogStatusGuard(m_status);
	//dev_status();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LiberaBrillianceGdx::dev_status()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::dev_status) ENABLED START -----*/
	//	Add your own code
	//TODO cleanup
	//Check for status change and push it to the logs.
	//LogStatusGuard(m_status);
	//current_status=m_status;

	//ugly but for Pogo reasons
	std::string status = m_status;
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command GetParameters related method
 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
 *
 *	@returns The BPM gain and offsets
 */
//--------------------------------------------------------
Tango::DevVarDoubleStringArray *LiberaBrillianceGdx::get_parameters()
{
	Tango::DevVarDoubleStringArray *argout;
	DEBUG_STREAM << "LiberaBrillianceGdx::GetParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::get_parameters) ENABLED START -----*/
	
	//	Add your own code
    argout = new Tango::DevVarDoubleStringArray();
    argout->dvalue.length(0);
    argout->svalue.length(0);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::get_parameters
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ReloadSystemProperties related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::reload_system_properties()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::ReloadSystemProperties()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::reload_system_properties) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::reload_system_properties
}
//--------------------------------------------------------
/**
 *	Command MagicCommand related method
 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
 *
 *	@param argin absolute path of the node name
 *	@returns value of specified node(s)
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaBrillianceGdx::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaBrillianceGdx::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::magic_command) ENABLED START -----*/
	
	//	Add your own code

    argout = new Tango::DevVarStringArray(1);
    argout->length(1);

    if (!m_libera->MagicCommand(argin, argout)) {
        INFO_STREAM << "magic_command() faled!" << endl;
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::magic_command
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ForceInitSettings related method
 *	Description: Initializing Libera Default Settings (Based to the properties) without performing init_device
 *
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::force_init_settings()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::ForceInitSettings()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::force_init_settings) ENABLED START -----*/
	//init_settings();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::force_init_settings
}
//--------------------------------------------------------
/**
 *	Command SetTraceLevel related method
 *	Description: Sets the Trace Error Level:  	Off     = 0,
 *                       		Low     = 1,
 *               		Med     = 2,
 *               		High    = 3,
 *               		Detail  = 4
 *
 *	@param argin 
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::set_trace_level(Tango::DevUShort argin)
{
	DEBUG_STREAM << "LiberaBrillianceGdx::SetTraceLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::set_trace_level) ENABLED START -----*/
	
	//	Add your own code
	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(argin));
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::set_trace_level
}
//--------------------------------------------------------
/**
 *	Command ResetStatusInterlock related method
 *	Description: Command to reset FOFB interlock Status
 *
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::reset_status_interlock()
{
	DEBUG_STREAM << "LiberaBrillianceGdx::ResetStatusInterlock()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::reset_status_interlock) ENABLED START -----*/
	
	//	Add your own code
	m_libera->Execute(module + "fofb.interlock.status.reset");
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::reset_status_interlock
}
//--------------------------------------------------------
/**
 *	Method      : LiberaBrillianceGdx::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaBrillianceGdx::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LiberaBrillianceGdx::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LiberaBrillianceGdx::namespace_ending) ENABLED START -----*/

/*
 *      Log status guard
 */
void LiberaBrillianceGdx::LogStatusGuard(std::string status)
{
	//TODO cleanup
	//cout << "Before, Status: "<< status <<  ", m_status: " << m_status << ", State: " << m_state << endl;
	//int state;
	//state = get_state();

	if (status.compare(current_status) != 0) {
		//Tango::DevState state = get_state();
		switch(m_state) {

		case 7:
			break;
		case 8:
			ERROR_STREAM << status << endl;
			//cout << "ERROR_STREAM " << m_status << endl;
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			WARN_STREAM << status << endl;
			//cout << "WARN_STREAM " << m_status << endl;
			break;
		default:
			//cout << "Inside default, State changed. " << status << ", " << m_state <<", " << get_state() << endl;
			break;
		}
	}
	//else
		//cout << "State same with before, " << status << ", " << m_state <<", " << get_state() << endl;
}

void LiberaBrillianceGdx::set_lib_error(std::string nodeinfo)
{
	m_state = Tango::FAULT;
    m_status = "Error while reading from a node:: "+ nodeinfo +". Please reinit the device";
    LiberaBrillianceGdx::LogStatusGuard(m_status);
    //throw nodeinfo;
}

void LiberaBrillianceGdx::init_settings()
{
	try
	{
    //Update Values from the Properties
    //MC
    //m_libera->UpdateScalar(attr_InterlockID_read, interlockId); //**
    //m_libera->UpdateScalar(attr_MgtOut_read, mgtOut); //**

	}
	catch (...)
	{
		m_state = Tango::FAULT;
//		m_status = Tango::UNKNOWN;
		return;
	}
}// //--------------------------------------------------------

// //--------------------------------------------------------
// /**
//  *	Read attribute FOFBDimMagnets related method
//  *	Description: fofb.dim.magnets
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Spectrum max = 100
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::read_FOFBDimMagnets(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBDimMagnets(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_FOFBDimMagnets_read, 10);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute FOFBDimMagnets related method
//  *	Description: fofb.dim.magnets
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Spectrum max = 100
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::write_FOFBDimMagnets(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBDimMagnets(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve number of write values
// 	int	w_length = attr.get_write_value_length();
// 	//	Retrieve pointer on write values (Do not delete !)
// 	const Tango::DevLong	*w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute logs related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevString
//  *	Attr type:	Spectrum max = 2048
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::read_logs(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::read_logs(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_logs_read, 2048);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute UserData related method
//  *	Description: User defined data
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Spectrum max = 256
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::read_UserData(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::read_UserData(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_UserData_read, 256);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute FOFBDimBpms related method
//  *	Description: fofb.dim.bpms
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::read_FOFBDimBpms(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBDimBpms(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_FOFBDimBpms_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute FOFBDimBpms related method
//  *	Description: fofb.dim.bpms
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::write_FOFBDimBpms(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBDimBpms(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevLong	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute FOFBDimEigenModes related method
//  *	Description: fofb.dim.eigenmodes
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::read_FOFBDimEigenModes(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::read_FOFBDimEigenModes(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_FOFBDimEigenModes_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute FOFBDimEigenModes related method
//  *	Description: fofb.dim.eigenmodes
//  *
//  *	Data type:	Tango::DevLong
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrillianceGdx::write_FOFBDimEigenModes(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrillianceGdx::write_FOFBDimEigenModes(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevLong	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }


/*----- PROTECTED REGION END -----*/	//	LiberaBrillianceGdx::namespace_ending
} //	namespace
